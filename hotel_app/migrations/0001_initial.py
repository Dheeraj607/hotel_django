# Generated by Django 3.1.7 on 2025-04-10 05:44

import datetime
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('bookingId', models.AutoField(primary_key=True, serialize=False)),
                ('customerId', models.IntegerField()),
                ('roomId', models.IntegerField(blank=True, null=True)),
                ('checkInDate', models.DateTimeField()),
                ('Advance', models.FloatField()),
                ('Rent', models.FloatField()),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'bookingsTable',
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('customerId', models.AutoField(primary_key=True, serialize=False)),
                ('fullName', models.CharField(max_length=255)),
                ('idPassportNumber', models.CharField(max_length=100, unique=True)),
                ('contactNumber', models.CharField(max_length=20)),
                ('emailAddress', models.EmailField(blank=True, max_length=255, null=True, unique=True)),
                ('nationality', models.CharField(blank=True, max_length=100, null=True)),
                ('specialRequests', models.TextField(blank=True, null=True)),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'customersTable',
            },
        ),
        migrations.CreateModel(
            name='CustomerFeedback',
            fields=[
                ('feedbackId', models.AutoField(primary_key=True, serialize=False)),
                ('customerId', models.IntegerField()),
                ('rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('comments', models.TextField(blank=True, null=True)),
                ('complaint', models.CharField(blank=True, max_length=100, null=True)),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'customerFeedback',
            },
        ),
        migrations.CreateModel(
            name='ExtraService',
            fields=[
                ('serviceId', models.AutoField(primary_key=True, serialize=False)),
                ('bookingId', models.IntegerField()),
                ('serviceName', models.CharField(max_length=100)),
                ('serviceCost', models.FloatField()),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
                ('paymentStatus', models.CharField(choices=[('Paid', 'Paid'), ('Partially Paid', 'Partially Paid'), ('Unpaid', 'Unpaid')], default='Unpaid', max_length=15)),
            ],
            options={
                'db_table': 'extraServices',
            },
        ),
        migrations.CreateModel(
            name='Invoices',
            fields=[
                ('invoiceId', models.AutoField(primary_key=True, serialize=False)),
                ('bookingId', models.IntegerField()),
                ('invoiceNumber', models.CharField(max_length=100, unique=True)),
                ('roomCharge', models.FloatField()),
                ('extraServices', models.FloatField(blank=True, null=True)),
                ('taxes', models.FloatField(blank=True, null=True)),
                ('totalAmount', models.FloatField()),
                ('amountPaid', models.FloatField()),
                ('pendingAmount', models.FloatField(blank=True, null=True)),
                ('paymentMode', models.CharField(choices=[('Credit Card', 'Credit Card'), ('Cash', 'Cash'), ('UPI', 'UPI'), ('Online', 'Online')], max_length=50)),
                ('transactionId', models.CharField(blank=True, max_length=100, null=True)),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'invoicesTable',
            },
        ),
        migrations.CreateModel(
            name='MaintenanceStaffRequest',
            fields=[
                ('requestId', models.AutoField(primary_key=True, serialize=False)),
                ('roomNumber', models.IntegerField()),
                ('issueType', models.CharField(max_length=50)),
                ('issueDescription', models.TextField()),
                ('reportedBy', models.CharField(max_length=50)),
                ('requestDateTime', models.DateTimeField(auto_now_add=True)),
                ('assignedStaff', models.IntegerField(blank=True, null=True)),
                ('taskStatus', models.CharField(default='Pending', max_length=20)),
                ('completionDateTime', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'maintenanceStaffRequests',
            },
        ),
        migrations.CreateModel(
            name='MaintenanceStaffRoles',
            fields=[
                ('roleId', models.AutoField(primary_key=True, serialize=False)),
                ('roleName', models.CharField(choices=[('plumber', 'Plumber'), ('electrician', 'Electrician'), ('cleaner', 'Cleaner'), ('general_maintenance', 'General Maintenance')], max_length=50, unique=True)),
            ],
            options={
                'db_table': 'maintenanceStaffRoles',
            },
        ),
        migrations.CreateModel(
            name='MaintenanceTask',
            fields=[
                ('taskId', models.AutoField(primary_key=True, serialize=False)),
                ('issueType', models.CharField(max_length=50)),
                ('priorityLevel', models.CharField(choices=[('Low', 'Low'), ('Medium', 'Medium'), ('High', 'High')], default='Medium', max_length=20)),
                ('assignedStaff', models.IntegerField(blank=True, null=True)),
                ('assignmentDate', models.DateTimeField(auto_now_add=True)),
                ('taskStatus', models.CharField(choices=[('Pending', 'Pending'), ('In Progress', 'In Progress'), ('Completed', 'Completed')], default='Pending', max_length=20)),
            ],
            options={
                'db_table': 'maintenanceTasks',
            },
        ),
        migrations.CreateModel(
            name='MaintenanceTracking',
            fields=[
                ('taskId', models.IntegerField(primary_key=True, serialize=False)),
                ('roomNumber', models.IntegerField()),
                ('issueType', models.CharField(max_length=50)),
                ('assignedStaff', models.IntegerField()),
                ('status', models.CharField(max_length=20)),
                ('completionNotes', models.TextField(blank=True, null=True)),
                ('completionDateTime', models.DateTimeField(blank=True, null=True)),
                ('recurringIssuesCount', models.IntegerField(default=0)),
            ],
            options={
                'db_table': 'maintenanceTracking',
            },
        ),
        migrations.CreateModel(
            name='MaintenanceType',
            fields=[
                ('typeId', models.AutoField(primary_key=True, serialize=False)),
                ('maintenanceTypeName', models.CharField(choices=[('plumbing', 'Plumbing'), ('electricianing', 'Electricianing'), ('cleaning', 'Cleaning'), ('general_maintaining', 'General Maintaining')], max_length=50, unique=True)),
            ],
            options={
                'db_table': 'maintenanceType',
            },
        ),
        migrations.CreateModel(
            name='Refund',
            fields=[
                ('refundId', models.AutoField(primary_key=True, serialize=False)),
                ('bookingId', models.IntegerField()),
                ('refundAmount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('reason', models.TextField()),
                ('processedAt', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'refundsTable',
            },
        ),
        migrations.CreateModel(
            name='RoomBooking',
            fields=[
                ('bookingId', models.AutoField(primary_key=True, serialize=False)),
                ('roomId', models.IntegerField()),
                ('guestName', models.CharField(max_length=100)),
                ('checkInDate', models.DateField()),
                ('checkOutDate', models.DateField()),
                ('assignedBy', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'roomBooking',
            },
        ),
        migrations.CreateModel(
            name='RoomInspection',
            fields=[
                ('inspectionId', models.AutoField(primary_key=True, serialize=False)),
                ('bookingId', models.IntegerField()),
                ('roomCondition', models.CharField(choices=[('Good', 'Good'), ('Need Cleaning', 'Need Cleaning'), ('Damages', 'Damages')], max_length=50)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('In Progress', 'In Progress'), ('Completed', 'Completed')], default='Pending', max_length=20)),
                ('remarks', models.TextField(blank=True, null=True)),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'roomInspectionTable',
            },
        ),
        migrations.CreateModel(
            name='RoomMaintenance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('roomId', models.IntegerField()),
                ('roomNumber', models.CharField(max_length=10)),
                ('maintenanceRequired', models.BooleanField()),
                ('lastCleanedDate', models.DateField(blank=True, null=True)),
                ('nextMaintenanceDate', models.DateField(blank=True, null=True)),
            ],
            options={
                'db_table': 'roomMaintenance',
            },
        ),
        migrations.CreateModel(
            name='RoomReport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('totalRooms', models.IntegerField()),
                ('occupiedRooms', models.IntegerField()),
                ('roomsUnderMaint', models.IntegerField()),
                ('revenueByType', models.FloatField()),
            ],
            options={
                'db_table': 'roomReports',
            },
        ),
        migrations.CreateModel(
            name='Rooms',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('roomId', models.IntegerField(unique=True)),
                ('roomNumber', models.CharField(max_length=10, unique=True)),
                ('roomType', models.CharField(max_length=50)),
                ('status', models.CharField(max_length=20)),
                ('Advance', models.FloatField()),
                ('Rent', models.FloatField()),
            ],
            options={
                'db_table': 'rooms',
            },
        ),
        migrations.CreateModel(
            name='TaskStatusUpdate',
            fields=[
                ('taskId', models.IntegerField(primary_key=True, serialize=False)),
                ('assignedStaff', models.IntegerField()),
                ('status', models.CharField(max_length=20)),
                ('completionNotes', models.TextField(blank=True, null=True)),
                ('completionDateTime', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'taskStatusUpdates',
            },
        ),
        migrations.CreateModel(
            name='StaffManagement',
            fields=[
                ('staffId', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('contactNumber', models.CharField(max_length=100, unique=True)),
                ('email', models.EmailField(max_length=100, unique=True)),
                ('address', models.CharField(max_length=255)),
                ('roleId', models.ForeignKey(db_column='roleId', on_delete=django.db.models.deletion.CASCADE, related_name='staff', to='hotel_app.maintenancestaffroles')),
            ],
            options={
                'db_table': 'staffManagement',
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('paymentId', models.AutoField(primary_key=True, serialize=False)),
                ('bookingId', models.IntegerField()),
                ('amount', models.FloatField(blank=True, null=True)),
                ('paymentMethod', models.CharField(blank=True, choices=[('Credit Card', 'Credit Card'), ('Cash', 'Cash'), ('UPI', 'UPI'), ('Online', 'Online')], max_length=50, null=True)),
                ('transactionId', models.CharField(blank=True, max_length=100, null=True)),
                ('paymentStatus', models.CharField(blank=True, choices=[('Paid', 'Paid'), ('Pending', 'Pending')], max_length=20, null=True)),
                ('createdAt', models.DateTimeField(auto_now_add=True, null=True)),
                ('paymentType', models.CharField(blank=True, max_length=50, null=True)),
                ('paymentDate', models.DateTimeField(blank=True, default=datetime.datetime.now, null=True)),
                ('serviceId', models.IntegerField(blank=True, null=True)),
                ('inspectionId', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hotel_app.roominspection')),
            ],
            options={
                'db_table': 'paymentsTable',
            },
        ),
        migrations.AddField(
            model_name='maintenancestaffroles',
            name='typeId',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='staffRoles', to='hotel_app.maintenancetype'),
        ),
        migrations.CreateModel(
            name='MaintenanceStaff',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('roleId', models.ForeignKey(db_column='roleId', on_delete=django.db.models.deletion.CASCADE, related_name='maintenance_staff', to='hotel_app.maintenancestaffroles')),
                ('staffId', models.ForeignKey(db_column='staffId', on_delete=django.db.models.deletion.CASCADE, related_name='maintenance_staff', to='hotel_app.staffmanagement')),
            ],
            options={
                'db_table': 'maintenanceStaff',
            },
        ),
        migrations.CreateModel(
            name='MaintenanceRequest',
            fields=[
                ('requestId', models.AutoField(primary_key=True, serialize=False)),
                ('roomId', models.IntegerField()),
                ('issueDescription', models.TextField()),
                ('priorityLevel', models.CharField(choices=[('Low', 'Low'), ('Medium', 'Medium'), ('High', 'High')], max_length=20)),
                ('requestDate', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('Pending', 'Pending'), ('In Progress', 'In Progress'), ('Completed', 'Completed')], default='Pending', max_length=20)),
                ('typeId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='maintenance_requests', to='hotel_app.maintenancetype')),
            ],
            options={
                'db_table': 'maintenanceRequests',
            },
        ),
        migrations.CreateModel(
            name='MaintenanceAssignment',
            fields=[
                ('assignmentId', models.AutoField(primary_key=True, serialize=False)),
                ('assignedDate', models.DateTimeField(auto_now_add=True)),
                ('completionDate', models.DateTimeField(blank=True, null=True)),
                ('issueResolved', models.BooleanField(default=False)),
                ('comments', models.TextField(blank=True, null=True)),
                ('maintenanceStaffId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='hotel_app.maintenancestaff')),
                ('requestId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='hotel_app.maintenancerequest')),
            ],
            options={
                'db_table': 'maintenanceAssignments',
            },
        ),
    ]
